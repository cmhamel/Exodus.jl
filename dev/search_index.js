var documenterSearchIndex = {"docs":
[{"location":"read_mesh_topology/#Reading-Mesh-Topology","page":"Reading Mesh Topology","title":"Reading Mesh Topology","text":"","category":"section"},{"location":"read_mesh_topology/","page":"Reading Mesh Topology","title":"Reading Mesh Topology","text":"Example for reading coordinates <!– ```jldoctest; filter = [r\"(Array{[a-zA-Z0-9]+,\\s?2}|Matrix{[a-zA-Z0-9]+})\", r\"{([a-zA-Z0-9]+,\\s?)+[a-zA-Z0-9]+}\"] using Exodus exo    = ExodusDatabase(\"../test/exampleoutput/output.gold\", \"r\") coords = readcoordinates(exo)","category":"page"},{"location":"read_mesh_topology/#output","page":"Reading Mesh Topology","title":"output","text":"","category":"section"},{"location":"read_mesh_topology/","page":"Reading Mesh Topology","title":"Reading Mesh Topology","text":"2×16641 Matrix{Float64}:  0.5  0.492188  0.492188  0.5       0.484375  0.484375  …  -0.46875  -0.476562  -0.484375  -0.492188  -0.5  0.5  0.5       0.492188  0.492188  0.5       0.492188     -0.5      -0.5       -0.5       -0.5       -0.5","category":"page"},{"location":"read_mesh_topology/","page":"Reading Mesh Topology","title":"Reading Mesh Topology","text":"``` –>","category":"page"},{"location":"unitful_ext/#ExodusUnitfulExt","page":"ExodusUnitfulExt","title":"ExodusUnitfulExt","text":"","category":"section"},{"location":"unitful_ext/","page":"ExodusUnitfulExt","title":"ExodusUnitfulExt","text":"This extension can be utilized to add units to values read in from exodusII files.","category":"page"},{"location":"unitful_ext/","page":"ExodusUnitfulExt","title":"ExodusUnitfulExt","text":"Modules = [unitful_ext]\nOrder = [:module, :type, :function]","category":"page"},{"location":"unitful_ext/#Exodus.read_coordinates-Union{Tuple{U}, Tuple{ExodusDatabase, U}} where U<:Unitful.FreeUnits","page":"ExodusUnitfulExt","title":"Exodus.read_coordinates","text":"read_coordinates(exo, unit)\n\n\n\n\n\n\n","category":"method"},{"location":"unitful_ext/#Exodus.read_times-Union{Tuple{U}, Tuple{ExodusDatabase, U}} where U<:Unitful.FreeUnits","page":"ExodusUnitfulExt","title":"Exodus.read_times","text":"read_times(\n    exo::ExodusDatabase,\n    unit::Unitful.FreeUnits\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"unitful_ext/#Exodus.read_values-Union{Tuple{U}, Tuple{ExodusDatabase, Type{GlobalVariable}, Integer, U}} where U<:Unitful.FreeUnits","page":"ExodusUnitfulExt","title":"Exodus.read_values","text":"read_values(\n    exo::ExodusDatabase,\n    t::Type{GlobalVariable},\n    timestep::Integer,\n    unit::Unitful.FreeUnits\n) -> Any\n\n\nWrapper method for global variables around the main readvalues method readvalues(exo::ExodusDatabase, t::Type{GlobalVariable}, timestep::Integer) = read_values(exo, t, timestep, 1, 1)\n\nExample: read_values(exo, GlobalVariable, 1)\n\n\n\n\n\n","category":"method"},{"location":"unitful_ext/#Exodus.read_values-Union{Tuple{U}, Tuple{ExodusDatabase, Type{NodalVariable}, Integer, Integer, U}} where U<:Unitful.FreeUnits","page":"ExodusUnitfulExt","title":"Exodus.read_values","text":"Wrapper method for nodal variables\n\n\n\n\n\n","category":"method"},{"location":"unitful_ext/#Exodus.read_values-Union{Tuple{U}, Tuple{ExodusDatabase, Type{NodalVariable}, Integer, String, U}} where U<:Unitful.FreeUnits","page":"ExodusUnitfulExt","title":"Exodus.read_values","text":"read_values(\n    exo::ExodusDatabase,\n    t::Type{NodalVariable},\n    timestep::Integer,\n    name::String,\n    unit::Unitful.FreeUnits\n) -> Any\n\n\nWrapper method for nodal variables\n\n\n\n\n\n","category":"method"},{"location":"unitful_ext/#Exodus.read_values-Union{Tuple{U}, Tuple{V}, Tuple{ExodusDatabase, Type{V}, Integer, Integer, Integer, U}} where {V<:Exodus.AbstractExodusVariable, U<:Unitful.FreeUnits}","page":"ExodusUnitfulExt","title":"Exodus.read_values","text":"read_values(\n    exo::ExodusDatabase,\n    type::Type{V<:Exodus.AbstractExodusVariable},\n    timestep::Integer,\n    id::Integer,\n    var_index::Integer,\n    unit::Unitful.FreeUnits\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"unitful_ext/#Exodus.read_values-Union{Tuple{U}, Tuple{V}, Tuple{ExodusDatabase, Type{V}, Integer, Integer, String, U}} where {V<:Union{ElementVariable, NodalVariable, NodeSetVariable, SideSetVariable}, U<:Unitful.FreeUnits}","page":"ExodusUnitfulExt","title":"Exodus.read_values","text":"read_values(\n    exo::ExodusDatabase,\n    _::Type{V<:Union{ElementVariable, NodalVariable, NodeSetVariable, SideSetVariable}},\n    time_step::Integer,\n    id::Integer,\n    var_name::String,\n    unit::Unitful.FreeUnits\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"unitful_ext/#Exodus.read_values-Union{Tuple{U}, Tuple{V}, Tuple{ExodusDatabase, Type{V}, Integer, String, String, U}} where {V<:Union{ElementVariable, NodeSetVariable, SideSetVariable}, U<:Unitful.FreeUnits}","page":"ExodusUnitfulExt","title":"Exodus.read_values","text":"read_values(\n    exo::ExodusDatabase,\n    _::Type{V<:Union{ElementVariable, NodeSetVariable, SideSetVariable}},\n    time_step::Integer,\n    set_name::String,\n    var_name::String,\n    unit::Unitful.FreeUnits\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"unitful_ext/#Exodus.write_values-Tuple{ExodusDatabase, Type{GlobalVariable}, Integer, Vector{<:Quantity}}","page":"ExodusUnitfulExt","title":"Exodus.write_values","text":"write_values(\n    exo::ExodusDatabase,\n    t::Type{GlobalVariable},\n    timestep::Integer,\n    var_values::Vector{<:Quantity}\n)\n\n\nWrapper method for global variables around the main writevalues method writevalues(   exo::ExodusDatabase, t::Type{GlobalVariable},    timestep::Integer, varvalues::Vector{<:AbstractFloat} ) = writevalues(exo, t, timestep, 1, 1, var_values)\n\nNote: you need to first run writenumberof_variables(exo, GlobalVariable, n) where n is the number of variables.\n\nExample: writenumberofvariables(exo, GlobalVariable, 5) writevalues(exo, GlobalVariable, 1, [10.0, 20.0, 30.0, 40.0, 50.0])\n\n\n\n\n\n","category":"method"},{"location":"unitful_ext/#Exodus.write_values-Tuple{ExodusDatabase, Type{NodalVariable}, Integer, Integer, Vector{<:Quantity}}","page":"ExodusUnitfulExt","title":"Exodus.write_values","text":"Wrapper for writing nodal variables by index number\n\n\n\n\n\n","category":"method"},{"location":"unitful_ext/#Exodus.write_values-Tuple{ExodusDatabase, Type{NodalVariable}, Integer, String, Vector{<:Quantity}}","page":"ExodusUnitfulExt","title":"Exodus.write_values","text":"write_values(\n    exo::ExodusDatabase,\n    t::Type{NodalVariable},\n    timestep::Integer,\n    var_name::String,\n    var_values::Vector{<:Quantity}\n) -> Any\n\n\nWrapper method for nodal variables\n\n\n\n\n\n","category":"method"},{"location":"unitful_ext/#Exodus.write_values-Union{Tuple{V}, Tuple{ExodusDatabase, Type{V}, Integer, Integer, Integer, Vector{<:Quantity}}} where V<:Exodus.AbstractExodusVariable","page":"ExodusUnitfulExt","title":"Exodus.write_values","text":"write_values(\n    exo::ExodusDatabase,\n    type::Type{V<:Exodus.AbstractExodusVariable},\n    timestep::Integer,\n    id::Integer,\n    var_index::Integer,\n    var_values::Vector{<:Quantity}\n)\n\n\n\n\n\n\n","category":"method"},{"location":"unitful_ext/#Exodus.write_values-Union{Tuple{V}, Tuple{ExodusDatabase, Type{V}, Integer, Integer, String, Vector{<:Quantity}}} where V<:Exodus.AbstractExodusVariable","page":"ExodusUnitfulExt","title":"Exodus.write_values","text":"write_values(\n    exo::ExodusDatabase,\n    type::Type{V<:Exodus.AbstractExodusVariable},\n    timestep::Integer,\n    id::Integer,\n    var_name::String,\n    var_value::Vector{<:Quantity}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"unitful_ext/#Exodus.write_values-Union{Tuple{V}, Tuple{ExodusDatabase, Type{V}, Integer, String, String, Vector{<:Quantity}}} where V<:Exodus.AbstractExodusVariable","page":"ExodusUnitfulExt","title":"Exodus.write_values","text":"write_values(\n    exo::ExodusDatabase,\n    _::Type{V<:Exodus.AbstractExodusVariable},\n    time_step::Integer,\n    set_name::String,\n    var_name::String,\n    var_value::Vector{<:Quantity}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"meshes_ext/#ExodusMeshesExt","page":"ExodusMeshesExt","title":"ExodusMeshesExt","text":"","category":"section"},{"location":"meshes_ext/","page":"ExodusMeshesExt","title":"ExodusMeshesExt","text":"This extension can be utilized to add units to values read in from exodusII files.","category":"page"},{"location":"meshes_ext/","page":"ExodusMeshesExt","title":"ExodusMeshesExt","text":"Modules = [meshes_ext]\nOrder = [:module, :type, :function]","category":"page"},{"location":"meshes_ext/#Meshes.SimpleMesh-Tuple{ExodusDatabase}","page":"ExodusMeshesExt","title":"Meshes.SimpleMesh","text":"SimpleMesh(exo::ExodusDatabase) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.jl-Methods","page":"Exodus Methods","title":"Exodus.jl Methods","text":"","category":"section"},{"location":"methods/#Public-methods","page":"Exodus Methods","title":"Public methods","text":"","category":"section"},{"location":"methods/","page":"Exodus Methods","title":"Exodus Methods","text":"Modules = [Exodus]\nPublic = true\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"methods/#Base.close-Tuple{ExodusDatabase}","page":"Exodus Methods","title":"Base.close","text":"close(exo::ExodusDatabase)\n\n\nUsed to close and ExodusDatabase.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.copy-Union{Tuple{E}, Tuple{E, String}} where E<:ExodusDatabase","page":"Exodus Methods","title":"Base.copy","text":"copy(\n    exo::ExodusDatabase,\n    new_file_name::String;\n    mesh_only_flag\n)\n\n\nUsed to copy an ExodusDatabase. As of right now this is the best way to create a new ExodusDatabase for output. Not all of the put methods have been wrapped and properly tested. This one has though.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.length-Tuple{NodeSet}","page":"Exodus Methods","title":"Base.length","text":"length(n::NodeSet) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.length-Tuple{SideSet}","page":"Exodus Methods","title":"Base.length","text":"length(s::SideSet) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.collect_element_connectivities-Union{Tuple{ExodusDatabase{M, I, B, F}}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}} where {M, I, B, F}","page":"Exodus Methods","title":"Exodus.collect_element_connectivities","text":"collect_element_connectivities(\n    exo::ExodusDatabase{M, I, B, F}\n) -> Any\n\n\ncollects all blocks by default\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.collect_element_to_element_connectivities-Union{Tuple{ExodusDatabase{M, I, B, F}}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}} where {M, I, B, F}","page":"Exodus Methods","title":"Exodus.collect_element_to_element_connectivities","text":"collect_element_to_element_connectivities(\n    exo::ExodusDatabase{M, I, B, F}\n) -> Any\n\n\ncollect all blocks by default\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.collect_node_to_element_connectivities-Union{Tuple{ExodusDatabase{M, I, B, F}}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}} where {M, I, B, F}","page":"Exodus Methods","title":"Exodus.collect_node_to_element_connectivities","text":"collect_node_to_element_connectivities(\n    exo::ExodusDatabase{M, I, B, F}\n) -> Any\n\n\ncollect all blocks by default\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.copy_mesh-Tuple{String, String}","page":"Exodus Methods","title":"Exodus.copy_mesh","text":"copy_mesh(file_name::String, new_file_name::String)\n\n\nSimpler copy method to only copy a mesh for output later on\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.decomp-Union{Tuple{I}, Tuple{String, I}} where I<:Integer","page":"Exodus Methods","title":"Exodus.decomp","text":"decomp(file_name::String, n_procs::Integer)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.epu-Tuple{String}","page":"Exodus Methods","title":"Exodus.epu","text":"epu(file_name::String)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.epu-Tuple{}","page":"Exodus Methods","title":"Exodus.epu","text":"epu() -> Any\n\n\nPrints epu help message\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.exodiff-Tuple{String, String, Vector{String}}","page":"Exodus Methods","title":"Exodus.exodiff","text":"exodiff(\n    ex_1::String,\n    ex_2::String,\n    cli_args::Vector{String}\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.exodiff-Tuple{String, String}","page":"Exodus Methods","title":"Exodus.exodiff","text":"exodiff(ex_1::String, ex_2::String; command_file) -> Bool\n\n\nReturn true if the two files pass the exodiff test. Otherwise it returns false\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.exodiff-Tuple{}","page":"Exodus Methods","title":"Exodus.exodiff","text":"exodiff() -> Any\n\n\nPrints exodiff help message\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_block-Tuple{ExodusDatabase, Integer}","page":"Exodus Methods","title":"Exodus.read_block","text":"read_block(exo::ExodusDatabase, block_id::Integer) -> Block\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_block-Tuple{ExodusDatabase, String}","page":"Exodus Methods","title":"Exodus.read_block","text":"read_block(exo::ExodusDatabase, block_name::String) -> Block\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_block_id_map-Union{Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Any}} where {M, I, B, F}","page":"Exodus Methods","title":"Exodus.read_block_id_map","text":"read_block_id_map(\n    exo::ExodusDatabase{M, I, B, F},\n    block_id\n) -> Any\n\n\nTODO do this one later... it depends on a few things\n\nTODO fix this to not use void_int... use a proper type\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_blocks-Union{Tuple{U}, Tuple{ExodusDatabase, U}} where U<:(Union{Vector{<:Integer}, var\"#s128\"} where var\"#s128\"<:Integer)","page":"Exodus Methods","title":"Exodus.read_blocks","text":"read_blocks(\n    exo::ExodusDatabase,\n    block_ids::Union{Vector{<:Integer}, var\"#s128\"} where var\"#s128\"<:Integer\n) -> Any\n\n\nHelper method for initializing blocks.\n\nTODO: change name to readelementblocks\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_coordinates-Tuple{ExodusDatabase}","page":"Exodus Methods","title":"Exodus.read_coordinates","text":"read_coordinates(exo::ExodusDatabase) -> Matrix\n\n\nMethod to read coordinates.  Returns a matrix that is ndim x nnodes.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_element_type-Union{Tuple{I}, Tuple{ExodusDatabase, I}} where I<:Integer","page":"Exodus Methods","title":"Exodus.read_element_type","text":"read_element_type(\n    exo::ExodusDatabase,\n    block_id::Integer\n) -> String\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_id_map-Union{Tuple{MAP}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Type{MAP}}} where {M, I, B, F, MAP<:Exodus.AbstractExodusMap}","page":"Exodus Methods","title":"Exodus.read_id_map","text":"read_id_map(\n    exo::ExodusDatabase{M, I, B, F},\n    type::Type{MAP<:Exodus.AbstractExodusMap}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_ids-Union{Tuple{S}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Type{S}}} where {M, I, B, F, S<:Exodus.AbstractExodusSet}","page":"Exodus Methods","title":"Exodus.read_ids","text":"read_ids(\n    exo::ExodusDatabase{M, I, B, F},\n    _::Type{S<:Exodus.AbstractExodusSet}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_info-Tuple{ExodusDatabase}","page":"Exodus Methods","title":"Exodus.read_info","text":"read_info(exo::ExodusDatabase) -> Vector{String}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_map-Union{Tuple{ExodusDatabase{M, I, B, F}}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}} where {M, I, B, F}","page":"Exodus Methods","title":"Exodus.read_map","text":"read_map(exo::ExodusDatabase{M, I, B, F}) -> Any\n\n\nTODO change to not use void_int\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_name-Union{Tuple{S}, Tuple{ExodusDatabase, Type{S}, Integer}} where S<:Exodus.AbstractExodusSet","page":"Exodus Methods","title":"Exodus.read_name","text":"read_name(\n    exo::ExodusDatabase,\n    _::Type{S<:Exodus.AbstractExodusSet},\n    id::Integer\n) -> String\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_name-Union{Tuple{V}, Tuple{ExodusDatabase, Type{V}, Integer}} where V<:Exodus.AbstractExodusVariable","page":"Exodus Methods","title":"Exodus.read_name","text":"read_name(\n    exo::ExodusDatabase,\n    _::Type{V<:Exodus.AbstractExodusVariable},\n    var_index::Integer\n) -> String\n\n\nGeneral method to read the name of a variable in index var_index  for a given variable type V.\n\nExamples: julia> readname(exo, ElementVariable, 1) \"stressxx\"\n\njulia> readname(exo, GlobalVariable, 2) \"reactionforce\"\n\njulia> readname(exo, NodalVariable, 1) \"displx\"\n\njulia> readname(exo, NodeSetVariable, 1) \"nsetdispl_x\"\n\njulia> read_name(exo, SideSetVariable, 1) \"pressure\"\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_names-Union{Tuple{S}, Tuple{ExodusDatabase, Type{S}}} where S<:Exodus.AbstractExodusSet","page":"Exodus Methods","title":"Exodus.read_names","text":"read_names(\n    exo::ExodusDatabase,\n    _::Type{S<:Exodus.AbstractExodusSet}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_names-Union{Tuple{V}, Tuple{ExodusDatabase, Type{V}}} where V<:Exodus.AbstractExodusVariable","page":"Exodus Methods","title":"Exodus.read_names","text":"read_names(\n    exo::ExodusDatabase,\n    _::Type{V<:Exodus.AbstractExodusVariable}\n) -> Vector{String}\n\n\nGeneral method to read the names of variables for a given variable type V.\n\nExamples: julia> readnames(exo, ElementVariable) \"stressxx\" \"stressyy\" \"stresszz\" \"stressxy\" \"stressyz\" \"stress_zx\"\n\njulia> readnames(exo, GlobalVariable) \"globaldispl\" \"reaction_force\"\n\njulia> readnames(exo, NodalVariable) \"displx\" \"disply\" \"displz\"\n\njulia> readname(exo, NodeSetVariable) \"nsetdisplx\" \"nsetdisply\" \"nsetdispl_z\"\n\njulia> read_name(exo, SideSetVariable) \"pressure\"\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_number_of_time_steps-Tuple{ExodusDatabase}","page":"Exodus Methods","title":"Exodus.read_number_of_time_steps","text":"read_number_of_time_steps(exo::ExodusDatabase) -> UInt32\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_number_of_variables-Union{Tuple{V}, Tuple{ExodusDatabase, Type{V}}} where V<:Exodus.AbstractExodusVariable","page":"Exodus Methods","title":"Exodus.read_number_of_variables","text":"read_number_of_variables(\n    exo::ExodusDatabase,\n    _::Type{V<:Exodus.AbstractExodusVariable}\n) -> Int32\n\n\nGeneral method to read the number of variables for a given variable type V.\n\nExamples: julia> readnumberof_variables(exo, ElementVariable) 6\n\njulia> readnumberof_variables(exo, GlobalVariable) 5\n\njulia> readnumberof_variables(exo, NodalVariable) 3\n\njulia> readnumberof_variables(exo, NodeSetVariable) 3\n\njulia> readnumberof_variables(exo, SideSetVariable) 6\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_qa-Tuple{ExodusDatabase}","page":"Exodus Methods","title":"Exodus.read_qa","text":"read_qa(exo::ExodusDatabase) -> Matrix{String}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_set-Union{Tuple{I}, Tuple{S}, Tuple{ExodusDatabase, Type{S}, I}} where {S<:Exodus.AbstractExodusSet, I}","page":"Exodus Methods","title":"Exodus.read_set","text":"read_set(\n    exo::ExodusDatabase,\n    type::Type{S<:Exodus.AbstractExodusSet},\n    set_id\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_sets-Union{Tuple{S}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Type{S}}} where {M, I, B, F, S<:Exodus.AbstractExodusSet}","page":"Exodus Methods","title":"Exodus.read_sets","text":"read_sets(\n    exo::ExodusDatabase{M, I, B, F},\n    type::Type{S<:Exodus.AbstractExodusSet}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_side_set_node_list-Union{Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Integer}} where {M, I, B, F}","page":"Exodus Methods","title":"Exodus.read_side_set_node_list","text":"read_side_set_node_list(\n    exo::ExodusDatabase{M, I, B, F},\n    side_set_id::Integer\n) -> Tuple{Any, Vector}\n\n\nUNTESTED\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_time-Union{Tuple{I}, Tuple{ExodusDatabase, I}} where I<:Integer","page":"Exodus Methods","title":"Exodus.read_time","text":"read_time(exo::ExodusDatabase, time_step::Integer) -> Any\n\n\nTODO figure out how to make this not use a vector of length 1 - either a ref or a ptr\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_times-Tuple{ExodusDatabase}","page":"Exodus Methods","title":"Exodus.read_times","text":"read_times(exo::ExodusDatabase) -> Vector\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_values-Tuple{ExodusDatabase, Type{GlobalVariable}, Integer}","page":"Exodus Methods","title":"Exodus.read_values","text":"read_values(\n    exo::ExodusDatabase,\n    t::Type{GlobalVariable},\n    timestep::Integer\n) -> Vector\n\n\nWrapper method for global variables around the main readvalues method readvalues(exo::ExodusDatabase, t::Type{GlobalVariable}, timestep::Integer) = read_values(exo, t, timestep, 1, 1)\n\nExample: read_values(exo, GlobalVariable, 1)\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_values-Tuple{ExodusDatabase, Type{NodalVariable}, Integer, Integer}","page":"Exodus Methods","title":"Exodus.read_values","text":"read_values(\n    exo::ExodusDatabase,\n    t::Type{NodalVariable},\n    timestep::Integer,\n    index::Integer\n) -> Any\n\n\nWrapper method for nodal variables\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_values-Tuple{ExodusDatabase, Type{NodalVariable}, Integer, String}","page":"Exodus Methods","title":"Exodus.read_values","text":"read_values(\n    exo::ExodusDatabase,\n    t::Type{NodalVariable},\n    timestep::Integer,\n    name::String\n) -> Any\n\n\nWrapper method for nodal variables\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_values-Tuple{ExodusDatabase, Type{NodalVectorVariable}, Integer, String}","page":"Exodus Methods","title":"Exodus.read_values","text":"read_values(\n    exo::ExodusDatabase,\n    t::Type{NodalVectorVariable},\n    timestep::Integer,\n    base_name::String\n) -> Any\n\n\nWrapper method for nodal vector variables\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_values-Union{Tuple{V}, Tuple{ExodusDatabase, Type{V}, Integer, Integer, String}} where V<:Union{ElementVariable, NodalVariable, NodeSetVariable, SideSetVariable}","page":"Exodus Methods","title":"Exodus.read_values","text":"read_values(\n    exo::ExodusDatabase,\n    _::Type{V<:Union{ElementVariable, NodalVariable, NodeSetVariable, SideSetVariable}},\n    time_step::Integer,\n    id::Integer,\n    var_name::String\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_values-Union{Tuple{V}, Tuple{ExodusDatabase, Type{V}, Integer, String, String}} where V<:Union{ElementVariable, NodeSetVariable, SideSetVariable}","page":"Exodus Methods","title":"Exodus.read_values","text":"read_values(\n    exo::ExodusDatabase,\n    _::Type{V<:Union{ElementVariable, NodeSetVariable, SideSetVariable}},\n    time_step::Integer,\n    set_name::String,\n    var_name::String\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_values-Union{Tuple{V}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Type{V}, Integer, Integer, Integer}} where {M, I, B, F, V<:ElementVariable}","page":"Exodus Methods","title":"Exodus.read_values","text":"read_values(\n    exo::ExodusDatabase{M, I, B, F},\n    _::Type{V<:ElementVariable},\n    timestep::Integer,\n    id::Integer,\n    var_index::Integer\n) -> Any\n\n\nMethod to read element variables\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_values-Union{Tuple{V}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Type{V}, Integer, Integer, Integer}} where {M, I, B, F, V<:GlobalVariable}","page":"Exodus Methods","title":"Exodus.read_values","text":"read_values(\n    exo::ExodusDatabase{M, I, B, F},\n    _::Type{V<:GlobalVariable},\n    timestep::Integer,\n    id::Integer,\n    var_index::Integer\n) -> Vector\n\n\nMethod to read global variables\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_values-Union{Tuple{V}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Type{V}, Integer, Integer, Integer}} where {M, I, B, F, V<:NodalVariable}","page":"Exodus Methods","title":"Exodus.read_values","text":"read_values(\n    exo::ExodusDatabase{M, I, B, F},\n    _::Type{V<:NodalVariable},\n    timestep::Integer,\n    id::Integer,\n    var_index::Integer\n) -> Any\n\n\nMethod to read nodal variables\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_values-Union{Tuple{V}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Type{V}, Integer, Integer, Integer}} where {M, I, B, F, V<:Union{NodeSetVariable, SideSetVariable}}","page":"Exodus Methods","title":"Exodus.read_values","text":"read_values(\n    exo::ExodusDatabase{M, I, B, F},\n    _::Type{V<:Union{NodeSetVariable, SideSetVariable}},\n    timestep::Integer,\n    id::Integer,\n    var_index::Integer\n) -> Any\n\n\nMethod to read nodeset/sideset variables\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_block-Tuple{ExodusDatabase, Block}","page":"Exodus Methods","title":"Exodus.write_block","text":"write_block(exo::ExodusDatabase, block::Block)\n\n\nWARNING: currently does not support edges, faces and attributes\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_block-Union{Tuple{I}, Tuple{ExodusDatabase, Integer, String, Matrix{I}}} where I<:Integer","page":"Exodus Methods","title":"Exodus.write_block","text":"write_block(\n    exo::ExodusDatabase,\n    block_id::Integer,\n    elem_type::String,\n    conn::Array{I<:Integer, 2}\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_blocks-Tuple{ExodusDatabase, Vector{<:Block}}","page":"Exodus Methods","title":"Exodus.write_blocks","text":"write_blocks(exo::ExodusDatabase, blocks::Vector{<:Block})\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_coordinates-Union{Tuple{F}, Tuple{ExodusDatabase, VecOrMat{F}}} where F<:AbstractFloat","page":"Exodus Methods","title":"Exodus.write_coordinates","text":"write_coordinates(\n    exo::ExodusDatabase,\n    coords::Union{Array{F<:AbstractFloat, 1}, Array{F<:AbstractFloat, 2}}\n)\n\n\nMethod to write coordinates\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_id_map-Union{Tuple{MAP}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Type{MAP}, Vector{M}}} where {M, I, B, F, MAP<:Exodus.AbstractExodusMap}","page":"Exodus Methods","title":"Exodus.write_id_map","text":"write_id_map(\n    exo::ExodusDatabase{M, I, B, F},\n    type::Type{MAP<:Exodus.AbstractExodusMap},\n    map::Array{M, 1}\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_info-Tuple{ExodusDatabase, Vector{String}}","page":"Exodus Methods","title":"Exodus.write_info","text":"write_info(exo::ExodusDatabase, info::Vector{String})\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_name-Union{Tuple{S}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, S, String}} where {M, I, B, F, S<:Exodus.AbstractExodusSet}","page":"Exodus Methods","title":"Exodus.write_name","text":"write_name(\n    exo::ExodusDatabase{M, I, B, F},\n    set::Exodus.AbstractExodusSet,\n    name::String\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_name-Union{Tuple{S}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Type{S}, Integer, String}} where {M, I, B, F, S<:Exodus.AbstractExodusSet}","page":"Exodus Methods","title":"Exodus.write_name","text":"write_name(\n    exo::ExodusDatabase{M, I, B, F},\n    _::Type{S<:Exodus.AbstractExodusSet},\n    set_id::Integer,\n    name::String\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_name-Union{Tuple{V}, Tuple{ExodusDatabase, Type{V}, Integer, String}} where V<:Exodus.AbstractExodusVariable","page":"Exodus Methods","title":"Exodus.write_name","text":"write_name(\n    exo::ExodusDatabase,\n    _::Type{V<:Exodus.AbstractExodusVariable},\n    var_index::Integer,\n    var_name::String\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_names-Union{Tuple{S}, Tuple{ExodusDatabase, Type{S}, Vector{String}}} where S<:Exodus.AbstractExodusSet","page":"Exodus Methods","title":"Exodus.write_names","text":"write_names(\n    exo::ExodusDatabase,\n    _::Type{S<:Exodus.AbstractExodusSet},\n    names::Vector{String}\n)\n\n\nWARNING: this methods likely does not have good safe guards\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_names-Union{Tuple{V}, Tuple{ExodusDatabase, Type{V}, Vector{String}}} where V<:Exodus.AbstractExodusVariable","page":"Exodus Methods","title":"Exodus.write_names","text":"write_names(\n    exo::ExodusDatabase,\n    type::Type{V<:Exodus.AbstractExodusVariable},\n    var_names::Vector{String}\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_number_of_variables-Union{Tuple{V}, Tuple{ExodusDatabase, Type{V}, Integer}} where V<:Exodus.AbstractExodusVariable","page":"Exodus Methods","title":"Exodus.write_number_of_variables","text":"write_number_of_variables(\n    exo::ExodusDatabase,\n    _::Type{V<:Exodus.AbstractExodusVariable},\n    num_vars::Integer\n)\n\n\nGeneral method to write the number of variables for a given variable type V.\n\nExamples: julia> writenumberof_variables(exo, ElementVariable, 6)\n\njulia> writenumberof_variables(exo, GlobalVariable, 5)\n\njulia> writenumberof_variables(exo, NodalVariable, 3)\n\njulia> writenumberof_variables(exo, NodeSetVariable, 3)\n\njulia> writenumberof_variables(exo, SideSetVariable, 6)\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_qa-Tuple{ExodusDatabase, Matrix{String}}","page":"Exodus Methods","title":"Exodus.write_qa","text":"write_qa(exo::ExodusDatabase, qa_record::Matrix{String})\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_set-Union{Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{T}, Tuple{ExodusDatabase{M, I, B, F}, T}} where {T<:Exodus.AbstractExodusSet, M, I, B, F}","page":"Exodus Methods","title":"Exodus.write_set","text":"write_set(\n    exo::ExodusDatabase{M, I, B, F},\n    set::Exodus.AbstractExodusSet\n)\n\n\nTyping ensures we don't write a set with non-matching types to the exodus file.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_sets-Union{Tuple{T}, Tuple{ExodusDatabase, Vector{T}}} where T<:Exodus.AbstractExodusSet","page":"Exodus Methods","title":"Exodus.write_sets","text":"write_sets(\n    exo::ExodusDatabase,\n    sets::Array{T<:Exodus.AbstractExodusSet, 1}\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_time-Union{Tuple{F}, Tuple{I}, Tuple{ExodusDatabase, I, F}} where {I<:Integer, F<:AbstractFloat}","page":"Exodus Methods","title":"Exodus.write_time","text":"write_time(\n    exo::ExodusDatabase,\n    time_step::Integer,\n    time_value::AbstractFloat\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_values-Tuple{ExodusDatabase, Type{GlobalVariable}, Integer, Vector{<:AbstractFloat}}","page":"Exodus Methods","title":"Exodus.write_values","text":"write_values(\n    exo::ExodusDatabase,\n    t::Type{GlobalVariable},\n    timestep::Integer,\n    var_values::Vector{<:AbstractFloat}\n)\n\n\nWrapper method for global variables around the main writevalues method writevalues(   exo::ExodusDatabase, t::Type{GlobalVariable},    timestep::Integer, varvalues::Vector{<:AbstractFloat} ) = writevalues(exo, t, timestep, 1, 1, var_values)\n\nNote: you need to first run writenumberof_variables(exo, GlobalVariable, n) where n is the number of variables.\n\nExample: writenumberofvariables(exo, GlobalVariable, 5) writevalues(exo, GlobalVariable, 1, [10.0, 20.0, 30.0, 40.0, 50.0])\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_values-Tuple{ExodusDatabase, Type{NodalVariable}, Integer, Integer, Vector{<:AbstractFloat}}","page":"Exodus Methods","title":"Exodus.write_values","text":"write_values(\n    exo::ExodusDatabase,\n    t::Type{NodalVariable},\n    timestep::Integer,\n    var_index::Integer,\n    var_values::Vector{<:AbstractFloat}\n)\n\n\nWrapper for writing nodal variables by index number\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_values-Tuple{ExodusDatabase, Type{NodalVariable}, Integer, String, Vector{<:AbstractFloat}}","page":"Exodus Methods","title":"Exodus.write_values","text":"write_values(\n    exo::ExodusDatabase,\n    t::Type{NodalVariable},\n    timestep::Integer,\n    var_name::String,\n    var_values::Vector{<:AbstractFloat}\n)\n\n\nWrapper method for nodal variables\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_values-Union{Tuple{V}, Tuple{ExodusDatabase, Type{V}, Integer, Integer, Integer, Vector{<:AbstractFloat}}} where V<:Exodus.AbstractExodusVariable","page":"Exodus Methods","title":"Exodus.write_values","text":"write_values(\n    exo::ExodusDatabase,\n    _::Type{V<:Exodus.AbstractExodusVariable},\n    timestep::Integer,\n    id::Integer,\n    var_index::Integer,\n    var_values::Vector{<:AbstractFloat}\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_values-Union{Tuple{V}, Tuple{ExodusDatabase, Type{V}, Integer, Integer, String, Vector{<:AbstractFloat}}} where V<:Exodus.AbstractExodusVariable","page":"Exodus Methods","title":"Exodus.write_values","text":"write_values(\n    exo::ExodusDatabase,\n    _::Type{V<:Exodus.AbstractExodusVariable},\n    timestep::Integer,\n    id::Integer,\n    var_name::String,\n    var_value::Vector{<:AbstractFloat}\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_values-Union{Tuple{V}, Tuple{ExodusDatabase, Type{V}, Integer, String, String, Vector{<:AbstractFloat}}} where V<:Exodus.AbstractExodusVariable","page":"Exodus Methods","title":"Exodus.write_values","text":"write_values(\n    exo::ExodusDatabase,\n    _::Type{V<:Exodus.AbstractExodusVariable},\n    time_step::Integer,\n    set_name::String,\n    var_name::String,\n    var_value::Vector{<:AbstractFloat}\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Private-methods","page":"Exodus Methods","title":"Private methods","text":"","category":"section"},{"location":"methods/","page":"Exodus Methods","title":"Exodus Methods","text":"Modules = [Exodus]\nPublic = false\nPrivate = true\nOrder = [:function]","category":"page"},{"location":"methods/#Base.show-Tuple{IO, Exodus.CommunicationMapParameters}","page":"Exodus Methods","title":"Base.show","text":"\n\n\n\n","category":"method"},{"location":"methods/#Base.show-Tuple{IO, Exodus.EPUException}","page":"Exodus Methods","title":"Base.show","text":"\n\n\n\n","category":"method"},{"location":"methods/#Base.show-Tuple{IO, Exodus.ExodiffException}","page":"Exodus Methods","title":"Base.show","text":"\n\n\n\n","category":"method"},{"location":"methods/#Base.show-Tuple{IO, Exodus.ExodusError}","page":"Exodus Methods","title":"Base.show","text":"\n\n\n\n","category":"method"},{"location":"methods/#Base.show-Tuple{IO, Exodus.LoadBalanceParameters}","page":"Exodus Methods","title":"Base.show","text":"\n\n\n\n","category":"method"},{"location":"methods/#Base.show-Tuple{IO, Exodus.NemSliceException}","page":"Exodus Methods","title":"Base.show","text":"\n\n\n\n","category":"method"},{"location":"methods/#Base.show-Tuple{IO, Exodus.NemSpreadException}","page":"Exodus Methods","title":"Base.show","text":"\n\n\n\n","category":"method"},{"location":"methods/#Base.show-Tuple{IO, Exodus.SetIDException}","page":"Exodus Methods","title":"Base.show","text":"\n\n\n\n","category":"method"},{"location":"methods/#Base.show-Tuple{IO, Exodus.SetNameException}","page":"Exodus Methods","title":"Base.show","text":"\n\n\n\n","category":"method"},{"location":"methods/#Base.show-Tuple{IO, Exodus.VariableIDException}","page":"Exodus Methods","title":"Base.show","text":"\n\n\n\n","category":"method"},{"location":"methods/#Base.show-Tuple{IO, Exodus.VariableNameException}","page":"Exodus Methods","title":"Base.show","text":"\n\n\n\n","category":"method"},{"location":"methods/#Base.show-Tuple{IO, NodeSet}","page":"Exodus Methods","title":"Base.show","text":"\n\n\n\n","category":"method"},{"location":"methods/#Base.show-Tuple{IO, SideSet}","page":"Exodus Methods","title":"Base.show","text":"\n\n\n\n","category":"method"},{"location":"methods/#Base.show-Union{Tuple{B}, Tuple{IO, B}} where B<:Block","page":"Exodus Methods","title":"Base.show","text":"\n\n\n\n","category":"method"},{"location":"methods/#Base.show-Union{Tuple{Init}, Tuple{IO, Init}} where Init<:Initialization","page":"Exodus Methods","title":"Base.show","text":"\n\n\n\n","category":"method"},{"location":"methods/#Exodus.InitializationGlobal-Union{Tuple{ExodusDatabase{M, I, B, F, Init}}, Tuple{Init}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}} where {M, I, B, F, Init}","page":"Exodus Methods","title":"Exodus.InitializationGlobal","text":"InitializationGlobal(\n    exo::ExodusDatabase{M, I, B, F, Init}\n) -> Initialization\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.bulk_int_mode-Tuple{Int32}","page":"Exodus Methods","title":"Exodus.bulk_int_mode","text":"bulk_int_mode(exo::Int32) -> Union{Type{Int32}, Type{Int64}}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.collect_element_connectivities!-Union{Tuple{B}, Tuple{I}, Tuple{Array{Vector{B}, 1}, Array{Block{I, Matrix{B}}, 1}}} where {I, B}","page":"Exodus Methods","title":"Exodus.collect_element_connectivities!","text":"collect_element_connectivities!(\n    conns::Array{Array{B, 1}, 1},\n    blocks::Array{Block{I, Array{B, 2}}, 1}\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.collect_element_to_element_connectivities!-Union{Tuple{B}, Tuple{Array{Vector{B}, 1}, Array{Vector{B}, 1}, Array{Vector{B}, 1}}} where B","page":"Exodus Methods","title":"Exodus.collect_element_to_element_connectivities!","text":"collect_element_to_element_connectivities!(\n    elem_to_elem::Array{Array{B, 1}, 1},\n    node_to_elem::Array{Array{B, 1}, 1},\n    conns::Array{Array{B, 1}, 1}\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.collect_global_to_color","page":"Exodus Methods","title":"Exodus.collect_global_to_color","text":"For collecting globaltocolor\n\ncollect_global_to_color(\n    file_name::String,\n    n_procs::Int64\n) -> Vector{Int64}\ncollect_global_to_color(\n    file_name::String,\n    n_procs::Int64,\n    n_dofs::Int64\n) -> Vector{Int64}\n\n\n\n\n\n\n","category":"function"},{"location":"methods/#Exodus.collect_node_to_element_connectivities!-Union{Tuple{B}, Tuple{Array{Vector{B}, 1}, Array{Vector{B}, 1}}} where B","page":"Exodus Methods","title":"Exodus.collect_node_to_element_connectivities!","text":"collect_node_to_element_connectivities!(\n    node_to_elem::Array{Array{B, 1}, 1},\n    conns::Array{Array{B, 1}, 1}\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.copy_transient-Tuple{String, String}","page":"Exodus Methods","title":"Exodus.copy_transient","text":"copy_transient(file_name::String, new_file_name::String)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.entries-Tuple{SideSet}","page":"Exodus Methods","title":"Exodus.entries","text":"entries(s::SideSet) -> AbstractVector\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.epu_error-Tuple{Cmd}","page":"Exodus Methods","title":"Exodus.epu_error","text":"epu_error(cmd::Cmd)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.exodiff_error-Tuple{Cmd}","page":"Exodus Methods","title":"Exodus.exodiff_error","text":"exodiff_error(cmd::Cmd)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.exodus_error_check-Union{Tuple{T}, Tuple{ExodusDatabase, T, String}} where T<:Integer","page":"Exodus Methods","title":"Exodus.exodus_error_check","text":"exodus_error_check(\n    exo::ExodusDatabase,\n    error_code::Integer,\n    method_name::String\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.exodus_error_check-Union{Tuple{T}, Tuple{Int32, T, String}} where T<:Integer","page":"Exodus Methods","title":"Exodus.exodus_error_check","text":"exodus_error_check(\n    exo::Int32,\n    error_code::Integer,\n    method_name::String\n)\n\n\nGeneric error handling method.\n\nArguments\n\nerror_code::T: error code, usually negative means something went bad\nmethod_name::String: method name that called this\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.exodus_type_check-NTuple{4, Any}","page":"Exodus Methods","title":"Exodus.exodus_type_check","text":"exodus_type_check(sym, context, type1, type2)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.extras-Tuple{SideSet}","page":"Exodus Methods","title":"Exodus.extras","text":"extras(s::SideSet) -> AbstractVector\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.float_mode-Tuple{Int32}","page":"Exodus Methods","title":"Exodus.float_mode","text":"float_mode(\n    exo::Int32\n) -> Union{Type{Float32}, Type{Float64}}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.get_bulk_int_type-Union{Tuple{ExodusDatabase{M, I, B, F}}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}} where {M, I, B, F}","page":"Exodus Methods","title":"Exodus.get_bulk_int_type","text":"get_bulk_int_type(_::ExodusDatabase{M, I, B, F}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.get_file_id-Tuple{ExodusDatabase}","page":"Exodus Methods","title":"Exodus.get_file_id","text":"get_file_id(exo::ExodusDatabase) -> Int32\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.get_float_type-Union{Tuple{ExodusDatabase{M, I, B, F}}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}} where {M, I, B, F}","page":"Exodus Methods","title":"Exodus.get_float_type","text":"get_float_type(_::ExodusDatabase{M, I, B, F}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.get_id_int_type-Union{Tuple{ExodusDatabase{M, I, B, F}}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}} where {M, I, B, F}","page":"Exodus Methods","title":"Exodus.get_id_int_type","text":"get_id_int_type(_::ExodusDatabase{M, I, B, F}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.get_init-Tuple{ExodusDatabase}","page":"Exodus Methods","title":"Exodus.get_init","text":"get_init(exo::ExodusDatabase) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.get_map_int_type-Union{Tuple{ExodusDatabase{M, I, B, F}}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}} where {M, I, B, F}","page":"Exodus Methods","title":"Exodus.get_map_int_type","text":"get_map_int_type(_::ExodusDatabase{M, I, B, F}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.get_mode-Tuple{ExodusDatabase}","page":"Exodus Methods","title":"Exodus.get_mode","text":"get_mode(exo::ExodusDatabase) -> String\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.id_error-Union{Tuple{t}, Tuple{Any, Type{t}, Any}} where t<:Exodus.AbstractExodusSet","page":"Exodus Methods","title":"Exodus.id_error","text":"id_error(exo, _::Type{t<:Exodus.AbstractExodusSet}, id)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.id_error-Union{Tuple{t}, Tuple{Any, Type{t}, Any}} where t<:Exodus.AbstractExodusVariable","page":"Exodus Methods","title":"Exodus.id_error","text":"id_error(exo, _::Type{t<:Exodus.AbstractExodusVariable}, id)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.id_int_mode-Tuple{Int32}","page":"Exodus Methods","title":"Exodus.id_int_mode","text":"id_int_mode(exo::Int32) -> Union{Type{Int32}, Type{Int64}}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.initialization-Tuple{ExodusDatabase}","page":"Exodus Methods","title":"Exodus.initialization","text":"initialization(exo::ExodusDatabase) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.map_int_mode-Tuple{Int32}","page":"Exodus Methods","title":"Exodus.map_int_mode","text":"map_int_mode(exo::Int32) -> Union{Type{Int32}, Type{Int64}}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.mode_error-Tuple{String}","page":"Exodus Methods","title":"Exodus.mode_error","text":"mode_error(mode::String)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.name_error-Union{Tuple{t}, Tuple{Any, Type{t}, Any}} where t<:Exodus.AbstractExodusSet","page":"Exodus Methods","title":"Exodus.name_error","text":"name_error(exo, _::Type{t<:Exodus.AbstractExodusSet}, name)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.name_error-Union{Tuple{t}, Tuple{Any, Type{t}, Any}} where t<:Exodus.AbstractExodusVariable","page":"Exodus Methods","title":"Exodus.name_error","text":"name_error(\n    exo,\n    _::Type{t<:Exodus.AbstractExodusVariable},\n    name\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.nem_slice-Tuple{}","page":"Exodus Methods","title":"Exodus.nem_slice","text":"nem_slice() -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.nem_slice-Union{Tuple{I}, Tuple{String, I}} where I<:Integer","page":"Exodus Methods","title":"Exodus.nem_slice","text":"nem_slice(file_name::String, n_procs::Integer) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.nem_slice_error-Tuple{Cmd}","page":"Exodus Methods","title":"Exodus.nem_slice_error","text":"nem_slice_error(cmd::Cmd)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.nem_spread-Tuple{}","page":"Exodus Methods","title":"Exodus.nem_spread","text":"nem_spread() -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.nem_spread-Union{Tuple{I}, Tuple{String, I}} where I<:Integer","page":"Exodus Methods","title":"Exodus.nem_spread","text":"nem_spread(file_name::String, n_procs::Integer) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.nem_spread_error-Tuple{Cmd}","page":"Exodus Methods","title":"Exodus.nem_spread_error","text":"nem_spread_error(cmd::Cmd)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.num_dimensions-Union{Tuple{Initialization{ND, NN, NE, NEB, NNS, NSS}}, Tuple{NSS}, Tuple{NNS}, Tuple{NEB}, Tuple{NE}, Tuple{NN}, Tuple{ND}} where {ND, NN, NE, NEB, NNS, NSS}","page":"Exodus Methods","title":"Exodus.num_dimensions","text":"num_dimensions(\n    _::Initialization{ND, NN, NE, NEB, NNS, NSS}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.num_element_blocks-Union{Tuple{Initialization{ND, NN, NE, NEB, NNS, NSS}}, Tuple{NSS}, Tuple{NNS}, Tuple{NEB}, Tuple{NE}, Tuple{NN}, Tuple{ND}} where {ND, NN, NE, NEB, NNS, NSS}","page":"Exodus Methods","title":"Exodus.num_element_blocks","text":"num_element_blocks(\n    _::Initialization{ND, NN, NE, NEB, NNS, NSS}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.num_elements-Union{Tuple{Initialization{ND, NN, NE, NEB, NNS, NSS}}, Tuple{NSS}, Tuple{NNS}, Tuple{NEB}, Tuple{NE}, Tuple{NN}, Tuple{ND}} where {ND, NN, NE, NEB, NNS, NSS}","page":"Exodus Methods","title":"Exodus.num_elements","text":"num_elements(\n    _::Initialization{ND, NN, NE, NEB, NNS, NSS}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.num_node_sets-Union{Tuple{Initialization{ND, NN, NE, NEB, NNS, NSS}}, Tuple{NSS}, Tuple{NNS}, Tuple{NEB}, Tuple{NE}, Tuple{NN}, Tuple{ND}} where {ND, NN, NE, NEB, NNS, NSS}","page":"Exodus Methods","title":"Exodus.num_node_sets","text":"num_node_sets(\n    _::Initialization{ND, NN, NE, NEB, NNS, NSS}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.num_nodes-Union{Tuple{Initialization{ND, NN, NE, NEB, NNS, NSS}}, Tuple{NSS}, Tuple{NNS}, Tuple{NEB}, Tuple{NE}, Tuple{NN}, Tuple{ND}} where {ND, NN, NE, NEB, NNS, NSS}","page":"Exodus Methods","title":"Exodus.num_nodes","text":"num_nodes(\n    _::Initialization{ND, NN, NE, NEB, NNS, NSS}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.num_side_sets-Union{Tuple{Initialization{ND, NN, NE, NEB, NNS, NSS}}, Tuple{NSS}, Tuple{NNS}, Tuple{NEB}, Tuple{NE}, Tuple{NN}, Tuple{ND}} where {ND, NN, NE, NEB, NNS, NSS}","page":"Exodus Methods","title":"Exodus.num_side_sets","text":"num_side_sets(\n    _::Initialization{ND, NN, NE, NEB, NNS, NSS}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.open_exodus_file-Tuple{String, Any}","page":"Exodus Methods","title":"Exodus.open_exodus_file","text":"open_exodus_file(file_name::String, mode) -> Int32\n\n\nHelper method for opening exodus database\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_block_connectivity-Union{Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Integer, Integer}} where {M, I, B, F}","page":"Exodus Methods","title":"Exodus.read_block_connectivity","text":"read_block_connectivity(\n    exo::ExodusDatabase{M, I, B, F},\n    block_id::Integer,\n    conn_length::Integer\n) -> Vector\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_block_parameters-Union{Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Integer}} where {M, I, B, F}","page":"Exodus Methods","title":"Exodus.read_block_parameters","text":"read_block_parameters(\n    exo::ExodusDatabase{M, I, B, F},\n    block_id::Integer\n) -> Tuple{String, Vararg{Any, 5}}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_blocks!-Union{Tuple{I}, Tuple{B}, Tuple{Vector{B}, ExodusDatabase, Vector{I}}} where {B<:Block, I<:Integer}","page":"Exodus Methods","title":"Exodus.read_blocks!","text":"read_blocks!(\n    blocks::Array{B<:Block, 1},\n    exo::ExodusDatabase,\n    block_ids::Array{I<:Integer, 1}\n)\n\n\nTODO: change name to readelementblocks!\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_coordinate_names-Tuple{ExodusDatabase}","page":"Exodus Methods","title":"Exodus.read_coordinate_names","text":"read_coordinate_names(exo::ExodusDatabase) -> Any\n\n\nMethod to read coordinates names Returns a vector of strings\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_ghost_nodes_and_procs-Tuple{Any, Any}","page":"Exodus Methods","title":"Exodus.read_ghost_nodes_and_procs","text":"read_ghost_nodes_and_procs(rank, exo) -> Tuple{Any, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_init_info-Tuple{ExodusDatabase}","page":"Exodus Methods","title":"Exodus.read_init_info","text":"read_init_info(\n    exo::ExodusDatabase\n) -> Tuple{Int32, Int32, String}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_internal_nodes_and_procs-Tuple{Any, Any}","page":"Exodus Methods","title":"Exodus.read_internal_nodes_and_procs","text":"read_internal_nodes_and_procs(rank, exo) -> Tuple{Any, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_node_cmaps-Tuple{Any, Any}","page":"Exodus Methods","title":"Exodus.read_node_cmaps","text":"read_node_cmaps(rank, exo) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_node_set_nodes-Union{Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Integer}} where {M, I, B, F}","page":"Exodus Methods","title":"Exodus.read_node_set_nodes","text":"read_node_set_nodes(\n    exo::ExodusDatabase{M, I, B, F},\n    set_id::Integer\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_num_map-Union{Tuple{MAP}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Type{MAP}}} where {M, I, B, F, MAP<:Exodus.AbstractExodusMap}","page":"Exodus Methods","title":"Exodus.read_num_map","text":"read_num_map(\n    exo::ExodusDatabase{M, I, B, F},\n    type::Type{MAP<:Exodus.AbstractExodusMap}\n) -> Vector\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_partial_block_connectivity-Union{Tuple{I}, Tuple{ExodusDatabase, I, I, I}} where I<:Integer","page":"Exodus Methods","title":"Exodus.read_partial_block_connectivity","text":"read_partial_block_connectivity(\n    exo::ExodusDatabase,\n    block_id::Integer,\n    start_num::Integer,\n    num_ent::Integer\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_partial_coordinates-Union{Tuple{I}, Tuple{ExodusDatabase, I, I}} where I<:Integer","page":"Exodus Methods","title":"Exodus.read_partial_coordinates","text":"read_partial_coordinates(\n    exo::ExodusDatabase,\n    start_node_num::Integer,\n    n_nodes::Integer\n) -> Matrix\n\n\nMethod to read a partial set of coordinates that are contiguous.  Returns a matrix that is ndim x nnodes\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_partial_coordinates_component-Union{Tuple{I}, Tuple{ExodusDatabase, I, I, I}} where I<:Integer","page":"Exodus Methods","title":"Exodus.read_partial_coordinates_component","text":"read_partial_coordinates_component(\n    exo::ExodusDatabase,\n    start_node_num::Integer,\n    n_nodes::Integer,\n    component::Integer\n) -> Vector\n\n\nMethod to read a specific component of a partial set of coordinates that are contiguous.  Returns a vector of length n_nodes TODO change to not use Cvoid\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_partial_coordinates_component-Union{Tuple{I}, Tuple{ExodusDatabase, I, I, String}} where I<:Integer","page":"Exodus Methods","title":"Exodus.read_partial_coordinates_component","text":"read_partial_coordinates_component(\n    exo::ExodusDatabase,\n    start_node_num::Integer,\n    n_nodes::Integer,\n    component::String\n) -> Vector\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_set_parameters-Union{Tuple{S}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Integer, Type{S}}} where {M, I, B, F, S<:Union{NodeSet, SideSet}}","page":"Exodus Methods","title":"Exodus.read_set_parameters","text":"read_set_parameters(\n    exo::ExodusDatabase{M, I, B, F},\n    set_id::Integer,\n    _::Type{S<:Union{NodeSet, SideSet}}\n) -> Tuple{Any, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_sets!-Union{Tuple{I}, Tuple{T}, Tuple{Vector{T}, ExodusDatabase, Vector{I}}} where {T<:Exodus.AbstractExodusSet, I}","page":"Exodus Methods","title":"Exodus.read_sets!","text":"read_sets!(\n    sets::Array{T<:Exodus.AbstractExodusSet, 1},\n    exo::ExodusDatabase,\n    ids::Array{I, 1}\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.read_side_set_elements_and_sides-Union{Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Integer}} where {M, I, B, F}","page":"Exodus Methods","title":"Exodus.read_side_set_elements_and_sides","text":"read_side_set_elements_and_sides(\n    exo::ExodusDatabase{M, I, B, F},\n    set_id::Integer\n) -> Tuple{Any, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.set_exodus_max_name_length-Tuple{Int32, Int32}","page":"Exodus Methods","title":"Exodus.set_exodus_max_name_length","text":"set_exodus_max_name_length(exoid::Int32, len::Int32)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.set_exodus_options-Tuple{T} where T","page":"Exodus Methods","title":"Exodus.set_exodus_options","text":"\n\n\n\n","category":"method"},{"location":"methods/#Exodus.set_name_dict-Tuple{ExodusDatabase, Type{Block}}","page":"Exodus Methods","title":"Exodus.set_name_dict","text":"set_name_dict(\n    exo::ExodusDatabase,\n    _::Type{Block}\n) -> Dict{String}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.set_name_dict-Tuple{ExodusDatabase, Type{NodeSet}}","page":"Exodus Methods","title":"Exodus.set_name_dict","text":"set_name_dict(\n    exo::ExodusDatabase,\n    _::Type{NodeSet}\n) -> Dict{String}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.set_name_dict-Tuple{ExodusDatabase, Type{SideSet}}","page":"Exodus Methods","title":"Exodus.set_name_dict","text":"set_name_dict(\n    exo::ExodusDatabase,\n    _::Type{SideSet}\n) -> Dict{String}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.var_name_dict-Tuple{ExodusDatabase, Type{ElementVariable}}","page":"Exodus Methods","title":"Exodus.var_name_dict","text":"var_name_dict(\n    exo::ExodusDatabase,\n    _::Type{ElementVariable}\n) -> Dict{String}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.var_name_dict-Tuple{ExodusDatabase, Type{GlobalVariable}}","page":"Exodus Methods","title":"Exodus.var_name_dict","text":"var_name_dict(\n    exo::ExodusDatabase,\n    _::Type{GlobalVariable}\n) -> Dict{String}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.var_name_dict-Tuple{ExodusDatabase, Type{NodalVariable}}","page":"Exodus Methods","title":"Exodus.var_name_dict","text":"var_name_dict(\n    exo::ExodusDatabase,\n    _::Type{NodalVariable}\n) -> Dict{String}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.var_name_dict-Tuple{ExodusDatabase, Type{NodeSetVariable}}","page":"Exodus Methods","title":"Exodus.var_name_dict","text":"var_name_dict(\n    exo::ExodusDatabase,\n    _::Type{NodeSetVariable}\n) -> Dict{String}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.var_name_dict-Tuple{ExodusDatabase, Type{SideSetVariable}}","page":"Exodus Methods","title":"Exodus.var_name_dict","text":"var_name_dict(\n    exo::ExodusDatabase,\n    _::Type{SideSetVariable}\n) -> Dict{String}\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_block_connectivity-Union{Tuple{I}, Tuple{ExodusDatabase, Integer, Matrix{I}}} where I<:Integer","page":"Exodus Methods","title":"Exodus.write_block_connectivity","text":"write_block_connectivity(\n    exo::ExodusDatabase,\n    block_id::Integer,\n    conn::Array{I<:Integer, 2}\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_coordinate_names-Tuple{ExodusDatabase, Vector{String}}","page":"Exodus Methods","title":"Exodus.write_coordinate_names","text":"write_coordinate_names(\n    exo::ExodusDatabase,\n    coord_names::Vector{String}\n)\n\n\nMethod to write coordinate names, e.g. x, y, z\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_initialization!-Tuple{Int32, Initialization}","page":"Exodus Methods","title":"Exodus.write_initialization!","text":"write_initialization!(exoid::Int32, init::Initialization)\n\n\nUsed to set up a exodus database in write mode\n\nThe ccall signatures should reall be B (bulk int type of exo) instead of Clonglong\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_partial_coordinates-Union{Tuple{F}, Tuple{I}, Tuple{ExodusDatabase, I, VecOrMat{F}}} where {I<:Integer, F<:AbstractFloat}","page":"Exodus Methods","title":"Exodus.write_partial_coordinates","text":"write_partial_coordinates(\n    exo::ExodusDatabase,\n    start_node_num::Integer,\n    coords::Union{Array{F<:AbstractFloat, 1}, Array{F<:AbstractFloat, 2}}\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_partial_coordinates_component-Union{Tuple{F}, Tuple{I}, Tuple{ExodusDatabase, I, I, Vector{F}}} where {I<:Integer, F<:AbstractFloat}","page":"Exodus Methods","title":"Exodus.write_partial_coordinates_component","text":"write_partial_coordinates_component(\n    exo::ExodusDatabase,\n    start_node_num::Integer,\n    component::Integer,\n    coords::Array{F<:AbstractFloat, 1}\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_partial_coordinates_component-Union{Tuple{F}, Tuple{I}, Tuple{ExodusDatabase, I, String, Vector{F}}} where {I<:Integer, F<:AbstractFloat}","page":"Exodus Methods","title":"Exodus.write_partial_coordinates_component","text":"write_partial_coordinates_component(\n    exo::ExodusDatabase,\n    start_node_num::Integer,\n    component::String,\n    coords::Array{F<:AbstractFloat, 1}\n)\n\n\n\n\n\n\n","category":"method"},{"location":"methods/#Exodus.write_set_parameters-Union{Tuple{T}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, T}} where {M, I, B, F, T<:Exodus.AbstractExodusSet}","page":"Exodus Methods","title":"Exodus.write_set_parameters","text":"write_set_parameters(\n    exo::ExodusDatabase{M, I, B, F},\n    set::Exodus.AbstractExodusSet\n)\n\n\nWARNING: currently doesn't support distance factors\n\n\n\n\n\n","category":"method"},{"location":"opening_files/#Opening-files","page":"Opening files","title":"Opening files","text":"","category":"section"},{"location":"opening_files/","page":"Opening files","title":"Opening files","text":"Example opening a file in read-only mode","category":"page"},{"location":"opening_files/","page":"Opening files","title":"Opening files","text":"using Exodus\nexo = ExodusDatabase(\"../test/example_output/output.gold\", \"r\")\n\n# output\n\nExodusDatabase:\n  File name                   = ../test/example_output/output.gold\n  Mode                        = r\n\nInitialization:\n  Number of dim       = 2\n  Number of nodes     = 16641\n  Number of elem      = 16384\n  Number of blocks    = 1\n  Number of node sets = 4\n  Number of side sets = 4\n\nBlock:\n  unnamed_block_1               \n\nNodeSet:\n  unnamed_nset_1                  unnamed_nset_2                  unnamed_nset_3                  unnamed_nset_4                               \n\nSideSet:\n  unnamed_sset_1                  unnamed_sset_2                  unnamed_sset_3                  unnamed_sset_4                               \n\nNodalVariable:\n  u                             \n\n\n","category":"page"},{"location":"","page":"Exodus","title":"Exodus","text":"CurrentModule = Exodus","category":"page"},{"location":"#Exodus","page":"Exodus","title":"Exodus","text":"","category":"section"},{"location":"","page":"Exodus","title":"Exodus","text":"Documentation for Exodus.","category":"page"},{"location":"","page":"Exodus","title":"Exodus","text":"Modules = [Exodus]\nOrder = [:module]","category":"page"},{"location":"#Exodus.Exodus","page":"Exodus","title":"Exodus.Exodus","text":"Block\nEdgeMap\nElementMap\nElementVariable\nExodusDatabase\nFaceMap\nGlobalVariable\nInitialization\nNodalVariable\nNodalVectorVariable\nNodeMap\nNodeSet\nNodeSetVariable\nSideSet\nSideSetVariable\nclose\ncollect_element_connectivities\ncollect_element_to_element_connectivities\ncollect_node_to_element_connectivities\ncopy\ncopy_mesh\ndecomp\nepu\nexodiff\nlength\nread_block\nread_block_id_map\nread_blocks\nread_coordinates\nread_element_type\nread_id_map\nread_ids\nread_info\nread_map\nread_name\nread_names\nread_number_of_time_steps\nread_number_of_variables\nread_qa\nread_set\nread_sets\nread_side_set_node_list\nread_time\nread_times\nread_values\nwrite_block\nwrite_blocks\nwrite_coordinates\nwrite_id_map\nwrite_info\nwrite_name\nwrite_names\nwrite_number_of_variables\nwrite_qa\nwrite_set\nwrite_sets\nwrite_time\nwrite_values\n\n\n\n\n\n","category":"module"},{"location":"types/#Exodus.jl-Types","page":"Exodus Types","title":"Exodus.jl Types","text":"","category":"section"},{"location":"types/#Public-methods","page":"Exodus Types","title":"Public methods","text":"","category":"section"},{"location":"types/","page":"Exodus Types","title":"Exodus Types","text":"Modules = [Exodus]\nPublic = true\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"types/#Exodus.Block","page":"Exodus Types","title":"Exodus.Block","text":"struct Block{I, A<:(AbstractMatrix)} <: Exodus.AbstractExodusSet{I, A<:(AbstractMatrix)}\n\nid::Any\nnum_elem::Int64\nnum_nodes_per_elem::Int64\nelem_type::String\nconn::AbstractMatrix\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.Block-Tuple{ExodusDatabase, Integer}","page":"Exodus Types","title":"Exodus.Block","text":"Block(exo::ExodusDatabase, block_id::Integer) -> Block\n\n\nInit method for block container.\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.Block-Tuple{ExodusDatabase, String}","page":"Exodus Types","title":"Exodus.Block","text":"Block(exo::ExodusDatabase, name::String) -> Block\n\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.EdgeMap","page":"Exodus Types","title":"Exodus.EdgeMap","text":"struct EdgeMap <: Exodus.AbstractExodusMap\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.ElementMap","page":"Exodus Types","title":"Exodus.ElementMap","text":"struct ElementMap <: Exodus.AbstractExodusMap\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.ElementVariable","page":"Exodus Types","title":"Exodus.ElementVariable","text":"struct ElementVariable <: Exodus.AbstractExodusVariable\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.ExodusDatabase","page":"Exodus Types","title":"Exodus.ExodusDatabase","text":"struct ExodusDatabase{M, I, B, F, Init}\n\nexo::Int32\nmode::String\nfile_name::String\ninit::Any\nblock_name_dict::Dict{String}\nnset_name_dict::Dict{String}\nsset_name_dict::Dict{String}\nelement_var_name_dict::Dict{String}\nglobal_var_name_dict::Dict{String}\nnodal_var_name_dict::Dict{String}\nnset_var_name_dict::Dict{String}\nsset_var_name_dict::Dict{String}\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.ExodusDatabase-Tuple{String, String}","page":"Exodus Types","title":"Exodus.ExodusDatabase","text":"ExodusDatabase(\n    file_name::String,\n    mode::String\n) -> ExodusDatabase\n\n\nType unstable helper to eliminate annoying lines of code to get type stability.\n\nIf you're looking for a type stable way to to open an exodus file, Simple copy past some of this into a barrier function\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.ExodusDatabase-Union{Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{Int32, String, String}} where {M, I, B, F}","page":"Exodus Types","title":"Exodus.ExodusDatabase","text":"\n\n\n\n","category":"method"},{"location":"types/#Exodus.ExodusDatabase-Union{Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{String, String}} where {M, I, B, F}","page":"Exodus Types","title":"Exodus.ExodusDatabase","text":"ExodusDatabase(\n    file_name::String,\n    mode::String\n) -> ExodusDatabase\n\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.ExodusDatabase-Union{Tuple{F}, Tuple{I}, Tuple{String, String}} where {I, F}","page":"Exodus Types","title":"Exodus.ExodusDatabase","text":"ExodusDatabase(\n    file_name::String,\n    mode::String\n) -> ExodusDatabase\n\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.ExodusDatabase-Union{Tuple{Init}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{String, String, Init, Type{M}, Type{I}, Type{B}, Type{F}}} where {M, I, B, F, Init<:Initialization}","page":"Exodus Types","title":"Exodus.ExodusDatabase","text":"ExodusDatabase(\n    file_name::String,\n    mode::String,\n    init::Initialization,\n    _::Type{M},\n    _::Type{I},\n    _::Type{B},\n    _::Type{F}\n) -> ExodusDatabase\n\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.ExodusDatabase-Union{Tuple{Init}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{String, String, Init}} where {M, I, B, F, Init<:Initialization}","page":"Exodus Types","title":"Exodus.ExodusDatabase","text":"\n\n\n\n","category":"method"},{"location":"types/#Exodus.FaceMap","page":"Exodus Types","title":"Exodus.FaceMap","text":"struct FaceMap <: Exodus.AbstractExodusMap\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.GlobalVariable","page":"Exodus Types","title":"Exodus.GlobalVariable","text":"struct GlobalVariable <: Exodus.AbstractExodusVariable\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.Initialization","page":"Exodus Types","title":"Exodus.Initialization","text":"struct Initialization{ND, NN, NE, NEB, NNS, NSS}\n\nType that holds initialization information.\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.Initialization-Union{Tuple{B}, Tuple{Int32, Type{B}}} where B","page":"Exodus Types","title":"Exodus.Initialization","text":"Initialization(exo::Int32, _::Type{B}) -> Initialization\n\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.Initialization-Union{Tuple{ExodusDatabase{M, I, B, F}}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}} where {M, I, B, F}","page":"Exodus Types","title":"Exodus.Initialization","text":"Initialization(\n    exo::ExodusDatabase{M, I, B, F}\n) -> Initialization\n\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.Initialization-Union{Tuple{Type{B}}, Tuple{B}} where B<:Integer","page":"Exodus Types","title":"Exodus.Initialization","text":"Initialization(_::Type{B<:Integer}) -> Initialization\n\n\nInitialization(_)\n\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.NodalVariable","page":"Exodus Types","title":"Exodus.NodalVariable","text":"struct NodalVariable <: Exodus.AbstractExodusVariable\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.NodalVectorVariable","page":"Exodus Types","title":"Exodus.NodalVectorVariable","text":"struct NodalVectorVariable <: Exodus.AbstractExodusVariable\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.NodeMap","page":"Exodus Types","title":"Exodus.NodeMap","text":"struct NodeMap <: Exodus.AbstractExodusMap\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.NodeSet","page":"Exodus Types","title":"Exodus.NodeSet","text":"struct NodeSet{I, A<:(AbstractVector)} <: Exodus.AbstractExodusSet{I, A<:(AbstractVector)}\n\nid::Any\nnodes::AbstractVector\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.NodeSet-Tuple{ExodusDatabase, String}","page":"Exodus Types","title":"Exodus.NodeSet","text":"NodeSet(exo::ExodusDatabase, name::String) -> NodeSet\n\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.NodeSet-Union{Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Integer}} where {M, I, B, F}","page":"Exodus Types","title":"Exodus.NodeSet","text":"NodeSet(\n    exo::ExodusDatabase{M, I, B, F},\n    id::Integer\n) -> NodeSet\n\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.NodeSetVariable","page":"Exodus Types","title":"Exodus.NodeSetVariable","text":"struct NodeSetVariable <: Exodus.AbstractExodusVariable\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.SideSet","page":"Exodus Types","title":"Exodus.SideSet","text":"struct SideSet{I, A<:(AbstractVector)} <: Exodus.AbstractExodusSet{I, A<:(AbstractVector)}\n\nid::Any\nelements::AbstractVector\nsides::AbstractVector\nnum_nodes_per_side::AbstractVector\nside_nodes::AbstractVector\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.SideSet-Tuple{ExodusDatabase, String}","page":"Exodus Types","title":"Exodus.SideSet","text":"SideSet(exo::ExodusDatabase, name::String) -> SideSet\n\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.SideSet-Union{Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F}, Integer}} where {M, I, B, F}","page":"Exodus Types","title":"Exodus.SideSet","text":"SideSet(\n    exo::ExodusDatabase{M, I, B, F},\n    id::Integer\n) -> SideSet\n\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.SideSetVariable","page":"Exodus Types","title":"Exodus.SideSetVariable","text":"struct SideSetVariable <: Exodus.AbstractExodusVariable\n\n\n\n\n\n","category":"type"},{"location":"types/#Private-methods","page":"Exodus Types","title":"Private methods","text":"","category":"section"},{"location":"types/","page":"Exodus Types","title":"Exodus Types","text":"Modules = [Exodus]\nPublic = false\nPrivate = true\nOrder = [:type]","category":"page"},{"location":"types/#Exodus.AbstractExodusMap","page":"Exodus Types","title":"Exodus.AbstractExodusMap","text":"abstract type AbstractExodusMap <: Exodus.AbstractExodusType\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.AbstractExodusSet","page":"Exodus Types","title":"Exodus.AbstractExodusSet","text":"abstract type AbstractExodusSet{I, A} <: Exodus.AbstractExodusType\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.AbstractExodusType","page":"Exodus Types","title":"Exodus.AbstractExodusType","text":"abstract type AbstractExodusType\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.AbstractExodusVariable","page":"Exodus Types","title":"Exodus.AbstractExodusVariable","text":"abstract type AbstractExodusVariable <: Exodus.AbstractExodusType\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.CommunicationMapParameters","page":"Exodus Types","title":"Exodus.CommunicationMapParameters","text":"struct CommunicationMapParameters{B}\n\nnode_cmap_ids::Vector\nnode_cmap_node_cnts::Vector\nelem_cmap_ids::Vector\nelem_cmap_elem_cnts::Vector\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.CommunicationMapParameters-Union{Tuple{Itype}, Tuple{Init}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F, Init}, Exodus.LoadBalanceParameters{B}, Itype}} where {M, I, B, F, Init, Itype<:Integer}","page":"Exodus Types","title":"Exodus.CommunicationMapParameters","text":"CommunicationMapParameters(\n    exo::ExodusDatabase{M, I, B, F, Init},\n    lb_params::Exodus.LoadBalanceParameters{B},\n    processor::Integer\n) -> Exodus.CommunicationMapParameters\n\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.EPUException","page":"Exodus Types","title":"Exodus.EPUException","text":"struct EPUException <: Exception\n\ncmd::Cmd\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.ElementCommunicationMap","page":"Exodus Types","title":"Exodus.ElementCommunicationMap","text":"struct ElementCommunicationMap{B}\n\nelem_ids::Vector\nside_ids::Vector\nproc_ids::Vector\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.ElementCommunicationMap-Union{Tuple{Itype}, Tuple{Init}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F, Init}, Itype, Any, Itype}} where {M, I, B, F, Init, Itype<:Integer}","page":"Exodus Types","title":"Exodus.ElementCommunicationMap","text":"ElementCommunicationMap(\n    exo::ExodusDatabase{M, I, B, F, Init},\n    elem_map_id::Integer,\n    elem_cnt,\n    processor::Integer\n) -> Exodus.ElementCommunicationMap\n\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.ExodiffException","page":"Exodus Types","title":"Exodus.ExodiffException","text":"struct ExodiffException <: Exception\n\ncmd::Cmd\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.ExodusError","page":"Exodus Types","title":"Exodus.ExodusError","text":"struct ExodusError <: Exception\n\nerror_code::Int32\nerror_msg::String\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.ExodusWindowsError","page":"Exodus Types","title":"Exodus.ExodusWindowsError","text":"struct ExodusWindowsError <: Exception\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.LoadBalanceParameters","page":"Exodus Types","title":"Exodus.LoadBalanceParameters","text":"struct LoadBalanceParameters{B}\n\nnum_int_nodes::Any\nnum_bor_nodes::Any\nnum_ext_nodes::Any\nnum_int_elems::Any\nnum_bor_elems::Any\nnum_node_cmaps::Any\nnum_elem_cmaps::Any\nprocessor::Int32\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.LoadBalanceParameters-Union{Tuple{Itype}, Tuple{Init}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F, Init}, Itype}} where {M, I, B, F, Init, Itype<:Integer}","page":"Exodus Types","title":"Exodus.LoadBalanceParameters","text":"LoadBalanceParameters(\n    exo::ExodusDatabase{M, I, B, F, Init},\n    processor::Integer\n) -> Exodus.LoadBalanceParameters\n\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.ModeException","page":"Exodus Types","title":"Exodus.ModeException","text":"struct ModeException <: Exception\n\nmode::String\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.NemSliceException","page":"Exodus Types","title":"Exodus.NemSliceException","text":"struct NemSliceException <: Exception\n\ncmd::Cmd\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.NemSpreadException","page":"Exodus Types","title":"Exodus.NemSpreadException","text":"struct NemSpreadException <: Exception\n\ncmd::Cmd\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.NodalScalarVariable","page":"Exodus Types","title":"Exodus.NodalScalarVariable","text":"struct NodalVariable <: Exodus.AbstractExodusVariable\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.NodeCommunicationMap","page":"Exodus Types","title":"Exodus.NodeCommunicationMap","text":"struct NodeCommunicationMap{B}\n\nnode_ids::Vector\nproc_ids::Vector\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.NodeCommunicationMap-Union{Tuple{Init}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F, Init}, Any, Any, Any}} where {M, I, B, F, Init}","page":"Exodus Types","title":"Exodus.NodeCommunicationMap","text":"NodeCommunicationMap(\n    exo::ExodusDatabase{M, I, B, F, Init},\n    node_map_id,\n    node_cnt,\n    processor\n) -> Exodus.NodeCommunicationMap\n\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.ProcessorElementMaps","page":"Exodus Types","title":"Exodus.ProcessorElementMaps","text":"struct ProcessorElementMaps{B}\n\nelem_map_internal::Vector\nelem_map_border::Vector\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.ProcessorElementMaps-Union{Tuple{Itype}, Tuple{Init}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F, Init}, Itype}} where {M, I, B, F, Init, Itype}","page":"Exodus Types","title":"Exodus.ProcessorElementMaps","text":"ProcessorElementMaps(\n    exo::ExodusDatabase{M, I, B, F, Init},\n    processor\n) -> Exodus.ProcessorElementMaps\n\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.ProcessorNodeMaps","page":"Exodus Types","title":"Exodus.ProcessorNodeMaps","text":"struct ProcessorNodeMaps{B}\n\nnode_map_internal::Vector\nnode_map_border::Vector\nnode_map_external::Vector\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.ProcessorNodeMaps-Union{Tuple{Itype}, Tuple{Init}, Tuple{F}, Tuple{B}, Tuple{I}, Tuple{M}, Tuple{ExodusDatabase{M, I, B, F, Init}, Itype}} where {M, I, B, F, Init, Itype}","page":"Exodus Types","title":"Exodus.ProcessorNodeMaps","text":"ProcessorNodeMaps(\n    exo::ExodusDatabase{M, I, B, F, Init},\n    processor\n) -> Exodus.ProcessorNodeMaps\n\n\n\n\n\n\n","category":"method"},{"location":"types/#Exodus.SetIDException","page":"Exodus Types","title":"Exodus.SetIDException","text":"struct SetIDException{M, I, B, F, V, I1<:Integer} <: Exception\n\nexo::ExodusDatabase\ntype::Type\nid::Integer\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.SetNameException","page":"Exodus Types","title":"Exodus.SetNameException","text":"struct SetNameException{M, I, B, F, V} <: Exception\n\nexo::ExodusDatabase\ntype::Type\nname::String\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.VariableIDException","page":"Exodus Types","title":"Exodus.VariableIDException","text":"struct VariableIDException{M, I, B, F, V} <: Exception\n\nexo::ExodusDatabase\ntype::Type\nid::Int64\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.VariableNameException","page":"Exodus Types","title":"Exodus.VariableNameException","text":"struct VariableNameException{M, I, B, F, V} <: Exception\n\nexo::ExodusDatabase\ntype::Type\nname::String\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.ex_entity_id","page":"Exodus Types","title":"Exodus.ex_entity_id","text":"\n\n\n\n","category":"type"},{"location":"types/#Exodus.ex_entity_type","page":"Exodus Types","title":"Exodus.ex_entity_type","text":"ex_entity_type\n\nEntity type enums (exentitytype in exodusII.h)\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.ex_inquiry","page":"Exodus Types","title":"Exodus.ex_inquiry","text":"ex_inquiry\n\nInquiry enums (ex_inquiry in exodusII.h).\n\n\n\n\n\n","category":"type"},{"location":"types/#Exodus.void_int","page":"Exodus Types","title":"Exodus.void_int","text":"void_int = Cvoid\n\n\n\n\n\n","category":"type"}]
}
